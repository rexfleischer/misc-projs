


here is the assumed definition of a user playable system:
system.user : [

  _id     : ${mongoid},
  name    : ${string},
  type    : "user",


  // the meta is for system data that has to do with managing
  // the system and lowing threaded contention and such. 
  // but these values will be specified at the simulation 
  // level, so we will not know what they are here.
  // but an example of what would be used here are things like
  // locking mechanisms for certain types of updating, update
  // times, or background thread commands.
  meta    : [
    ??
  ]

  // this is the immediate object that the entire system
  // is orbiting. this will help with actually moving the
  // system correctly,
  // note: if the systemid is null, then we assume the
  // center of the galaxy
  orbiting    : [
    systemid    : ${mongoid},
    delta_alpha : ${double : (-PI <= da <= PI) / (game hour)},
    alpha       : ${double : 0 <= a <= PI*2},
    distance    : ${double : 0 < d},
  ],

  // this has to do with where the center of the system
  // is located to the perspective of the galaxy.
  orientation  : [
    alpha     : ${double : 0 <= a <= PI*2},
    distance  : ${double : 0 < d},
  ],

  // the system needs to be setup and known how to move
  // its orbitals and such. so we setup the framework here
  // and make points for the orbitals and other points to
  // rotate. 
  // note: there is always at least one point which means
  // the galaxy is a unary system.
  //
  // the basic idea of how this is being described is it 
  // recursively defines itself from a base object type
  // of a "point". the point will describe how to crawl 
  // sub points and what that actual point is.
  rootpoint : ${point},

];


// this is the base object of a point within a system..
//
// note: mass is always specified because even a "orbit_marker"
// point is the sum of all the child stars... or something
// more crazy if there is no star, but that will happen on
// a case by case basis.
point.definition = [

  name  : ${string},
  type  : ${point.type.enum},
  mass  : ${double : 0 < m},

  // see ${system.user.meta}'s explanation
  meta    : [
    ??
  ]
  
  // the orientation according to the parent object
  orientation : [
    delta_alpha : ${double : (-PI <= da <= PI) / (game hour)},
    alpha       : ${double : 0 <= a <= PI*2},
    distance    : ${double : 0 < d},
  ],
  
  children  : [
    ${point},
    ${point},
    ...
  ],
];

point.type.enum = [
  orbit_marker,
  star,
  planet,
  moon,
  cloud,
  astroid_belt,
];


point.orbit_marker = [
  // there are no extentions of data for the orbit marker
];

point.star = [
  
  radius  : ${double : 0 < r},
  
  // the luminosity of a star will tell you how much
  // energy can actually be harvested from it through
  // solar energy.
  //
  // note: the most the luminosity is harvested, the more
  // it may effect the planets orbiting. for instance, 
  // life may die on "natural" planets, or it may cost
  // extra fuel for heating and making planets habitable 
  // for the user's citizens.
  luminosity  : ${double : 0 < l}
];

point.astroid_belt = [
  
  // this represents the amount of materials that can
  // be harvested. basically, each byte represents an equal
  // portion (512/(PI*2))% of the astroid belt. that means
  // that while harvesting the astroid belt, the materials
  // can become depleted in one part of the belt and therefore
  // the user needs to move the harvesters or wait for the
  // that portion of the belt to become available again.
  // NOTE: harvesting will take materials from a range within
  // the array, meaning that the harvesters should be spread
  // out while harvesting.
  health    : ${byte[512]},

  // the material represents the percentage breakdown of the 
  // ore that would be gathered from each harvest. basically
  // that means that if someone harvested 100,000 "units" of
  // ore with 10% of one type and 90% of another, they would 
  // actually receive 10,000 of the first type and 90,000 of
  // the second type.
  material  : [
    ${ore.type} : ${byte : 0 < p <= 100},
    ...
  ]
];

point.planet = [
  
  radius      : ${double : 0 < r},
  health      : ${byte : 0 <= p <= 100},
  planettype  : ${point.planet.enum},

  // this can be null, but the key must be there
  planet_ring : [
    dist_inner  : ${double : 0 < d},
    dist_outer  : ${double : dist_inner < d},
    health      : ${byte[64]},
    material    : [
      ${gas.type} : ${byte : 0 < p <= 100},
      ...
    ],
  ]
  
  // see ${point.astroid_belt.material}'s explanation.
  material  : [
    ${ore.type} : ${byte : 0 < p <= 100},
    ...
    ${gas.type} : ${byte : 0 < p <= 100},
    ...
  ],
  
];

point.moon = [
  
  radius    : ${double : 0 < r},
  health    : ${byte : 0 <= p <= 100},
  moontype  : ${point.moon.enum},
  
  // see ${point.astroid_belt.material}'s explanation.
  material  : [
    ${ore.type} : ${byte : 0 < p <= 100},
    ...
  ],
  
];


/**
 * the cloud and the astroid are the only things in a 
 * system that can be depleted and then reappear.
 */ 

point.cloud = [
  
  radius  : ${double : 0 < r},
  
  // this represents the amount of materials that can
  // be harvested from a certain point within the cloud.
  // this is almost the same as a belt, except its 2d
  // instead of linear. the main different from an astroid
  // belt and a cloud, is a cloud can actually become depleted.
  // but never fear! another cloud will reappear!
  health  : ${byte},
  
  // see ${point.astroid_belt.material}'s explanation.
  material  : [
    ${gas.type} : ${byte : 0 < p <= 100},
    ...
  ],
  
];

point.astroid = [
  
  radius  : ${double : 0 < r},
  
  // this represents the amount of materials that can
  // be harvested from the astroid. this health will not
  // regenerate and when depleted, the astroid will 
  // disappear. another astroid will come about though.
  health  : ${byte},
  
  // see ${point.astroid_belt.material}'s explanation.
  material  : [
    ${ore.type} : ${byte : 0 < p <= 100},
    ...
  ],
  
];






point.planet.enum = [
  
  /**
   * A gas giant is a massive planet with a thick atmosphere of hydrogen 
   * and helium. They may have a dense molten core of rocky elements or 
   * the core may have completely dissolved and dispersed throughout the 
   * planet if the planet is hot enough.[4] The hydrogen and helium in 
   * "traditional" gas giants like Jupiter and Saturn constitutes most of 
   * the planet, whereas the hydrogen/helium only makes up an outer envelope 
   * on Uranus and Neptune which are sometimes called ice giants, as they 
   * are mostly composed of water, ammonia, and methane molten ices.
   * {@see: http://en.wikipedia.org/wiki/Gas_giant}
   */
  JOVIAN,

  /**
   * An ocean planet (also termed a waterworld) is a type of planet whose 
   * surface is completely covered with an ocean of water.
   * {@see: http://en.wikipedia.org/wiki/Ocean_planet}
   */
  OCEAN,

  /**
   * Such a planet would probably have an iron or steel-rich core like 
   * the known terrestrial planets. Surrounding that would be molten 
   * silicon carbide and titanium carbide. Above that, a layer of 
   * carbon in the form of graphite, possibly with a kilometers-thick 
   * substratum of diamond if there is sufficient pressure. During volcanic 
   * eruptions, it is possible that diamonds from the interior could 
   * come up to the surface, resulting in mountains of diamonds and silicon 
   * carbides. The surface would contain frozen or liquid hydrocarbons 
   * (e.g. tar and methane) and carbon monoxide.
   * {@see: http://en.wikipedia.org/wiki/Carbon_planet}
   */
  CARBON,

  /**
   * A terrestrial planet, telluric planet or rocky planet is a planet that 
   * is composed primarily of silicate rocks or metals. Within the Solar 
   * System, the terrestrial planets are the inner planets closest to the 
   * Sun. The terms are derived from Latin words for Earth (Terra and Tellus), 
   * as these planets are, in a certain way, "Earth-like".
   * {@see: http://en.wikipedia.org/wiki/Terrestrial_planet}
   */
  SILICATE,

  /**
   * Iron-rich planets may be the remnants of normal metal/silicate rocky 
   * planets whose rocky mantles were stripped away by giant impacts. Some 
   * are believed to consist of diamond fields. Current planet formation 
   * models predict iron-rich planets will form in close-in orbits or
   * orbiting massive stars where the protoplanetary disk presumably consists 
   * of iron-rich material.
   * 
   * Iron-rich planets are smaller and more dense than other types of planets 
   * of comparable mass.[3] Such planets would have no plate tectonics 
   * or strong magnetic field as they cool rapidly after formation.
   * {@see: http://en.wikipedia.org/wiki/Iron_planet}
   */
  IRON
];

point.moon.enum = [

  /**
   * see ${point.planet.enum.CARBON}'s explanation
   */
  CARBON,

  /**
   * see ${point.planet.enum.SILICATE}'s explanation
   */
  SILICATE,

  /**
   * see ${point.planet.enum.IRON}'s explanation
   */
  IRON
];


