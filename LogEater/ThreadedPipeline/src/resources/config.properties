# To change this template, choose Tools | Templates
# and open the template in the editor.

pipeline.basic.pipes = one, two, three




#################################################
# 
# to define a pipe, we need to give it a few 
# things the system can work work. input/output
# type and interface is one. the class that will
# be created by the factories, and the context
# that the class is. the context helps with the
# reusability of the classes implemented outside
# of the pipeline framework. here is the basic setup:
# 
# pipeline.pipes.{name}.context         = {context}
# pipeline.pipes.{name}.class           = {some.implemented.Class}
# pipeline.pipes.{name}.input.type      = {IN_MEMORY | ON_DISK}
# pipeline.pipes.{name}.input.interface = {OBJECT | STRING | MAP | OBJECTMAP}
# pipeline.pipes.{name}.output.type     = {IN_MEMORY | ON_DISK}
# pipeline.pipes.{name}.output.interface= {OBJECT | STRING | MAP | OBJECTMAP}
# 
# NOTE: the starting (or source) pipe optionally can have an input (becuase the
#       input needs to come from it) and the ending pipe (or persistence)
#       cannot have an output (because the data shouldnt go any further)
# 


pipeline.pipes.one.context      = something
pipeline.pipes.one.class        = com.rf.eater.something
pipeline.pipes.one.input.type   = 








origins = community

origin.community.check      = community
origin.community.regex      = (.*?) (.*?) (.*?) \\[(.*?)\\] \"(.*?)\" (.*?) (.*?) \"(.*?)\" \"(.*?)\" (.*?) \"(.*?)\"
origin.community.mapping    = ip, identd, userid, time, request, status_code, return_size
origin.community.persistence= community_mysql

persistence.community_mysql.type = MY_SQL
persistence.comminuty_mysql.host = 
persistence.community_mysql.user = 
persistence.community_mysql.pass = 